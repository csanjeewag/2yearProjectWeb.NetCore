// <auto-generated />
using EMS.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EMS.Data.Migrations
{
    [DbContext(typeof(EMSContext))]
    [Migration("20190202090757_addnotificationview1")]
    partial class addnotificationview1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EMS.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EMS.Data.Models.CaptainEmails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description1");

                    b.Property<string>("Description2");

                    b.Property<string>("Description3");

                    b.Property<int>("EventId");

                    b.Property<int>("SenderId");

                    b.Property<string>("Topic");

                    b.Property<DateTime>("senderdate");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("CaptainEmails");
                });

            modelBuilder.Entity("EMS.Data.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentIn");

                    b.Property<DateTime>("CommentTime");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("EventId");

                    b.Property<bool>("isActive");

                    b.HasKey("CommentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EMS.Data.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactType");

                    b.Property<bool>("IsActive");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EMS.Data.Models.ContactDetails", b =>
                {
                    b.Property<int>("ContactDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("ContactContactId");

                    b.Property<string>("ContactDescription");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("Number1");

                    b.Property<int>("Number2");

                    b.Property<int>("TaskId");

                    b.HasKey("ContactDetailId");

                    b.HasIndex("ContactContactId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("EMS.Data.Models.CricketTeamRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LiquorCount");

                    b.Property<DateTime>("Registerdate");

                    b.Property<string>("TeamName");

                    b.Property<int>("VegeCount");

                    b.HasKey("Id");

                    b.ToTable("cricketTeamRegisters");
                });

            modelBuilder.Entity("EMS.Data.Models.Department", b =>
                {
                    b.Property<string>("DprtId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DprtName");

                    b.Property<bool>("IsActive");

                    b.HasKey("DprtId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EMS.Data.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dest");

                    b.Property<int>("DestVote");

                    b.Property<int>("PollId");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("EMS.Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentDprtId");

                    b.Property<string>("EmpAddress1");

                    b.Property<string>("EmpAddress2");

                    b.Property<string>("EmpContact");

                    b.Property<string>("EmpEmail");

                    b.Property<string>("EmpGender");

                    b.Property<string>("EmpId");

                    b.Property<string>("EmpName");

                    b.Property<string>("EmpPassword");

                    b.Property<string>("EmpProfilePicture");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("PositionId");

                    b.Property<string>("PositionPId");

                    b.Property<int>("ProjectPrId");

                    b.Property<string>("RegisterCode");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentDprtId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProjectPrId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EMS.Data.Models.EmployeeTask", b =>
                {
                    b.Property<int>("EId");

                    b.Property<int>("TaskId");

                    b.HasKey("EId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("EmployeeTasks");
                });

            modelBuilder.Entity("EMS.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActualCost");

                    b.Property<int>("BudgetedCost");

                    b.Property<DateTime>("ClosingDate");

                    b.Property<string>("Destination");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("EventDescription");

                    b.Property<string>("EventImageUrl");

                    b.Property<string>("EventTitle");

                    b.Property<int>("EventTypeId");

                    b.Property<string>("IsFamilyMembersAllowed");

                    b.Property<string>("Liquor");

                    b.Property<int>("MainOrganiZer");

                    b.Property<string>("NumberOfTeams");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Summary");

                    b.Property<string>("Venue");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EMS.Data.Models.EventAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ActualCost");

                    b.Property<bool>("BudgetedCost");

                    b.Property<bool>("ClosingDate");

                    b.Property<bool>("Destination");

                    b.Property<bool>("EndDate");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsFamilyMembersAllowed");

                    b.Property<bool>("Liquor");

                    b.Property<bool>("MainOrganiZer");

                    b.Property<bool>("NumberOfTeams");

                    b.Property<bool>("Summary");

                    b.Property<bool>("Venue");

                    b.HasKey("Id");

                    b.ToTable("EventAttributes");
                });

            modelBuilder.Entity("EMS.Data.Models.EventImages", b =>
                {
                    b.Property<string>("ImageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsActive");

                    b.HasKey("ImageId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("EMS.Data.Models.Eventtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventTypeDescription");

                    b.Property<string>("EventTypeName");

                    b.HasKey("Id");

                    b.ToTable("Eventtypes");
                });

            modelBuilder.Entity("EMS.Data.Models.FrontPage", b =>
                {
                    b.Property<string>("CriEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CriEventContent1");

                    b.Property<string>("CriEventContent2");

                    b.Property<DateTime>("CriEventDate");

                    b.Property<DateTime>("CriEventDeadLine");

                    b.Property<string>("CriEventMainTopic");

                    b.Property<string>("CriEventPlace");

                    b.Property<string>("CriEventSubTopic");

                    b.Property<DateTime>("CriEventTime");

                    b.HasKey("CriEventId");

                    b.ToTable("FrontPages");
                });

            modelBuilder.Entity("EMS.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("All");

                    b.Property<string>("Data");

                    b.Property<string>("DataType");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Sendernme");

                    b.Property<string>("Url");

                    b.Property<bool>("View");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EMS.Data.Models.NotificationViewEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmployeeId");

                    b.Property<int>("NotificationId");

                    b.Property<bool>("View");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("NotificationId")
                        .IsUnique();

                    b.ToTable("NotificationViewEmployees");
                });

            modelBuilder.Entity("EMS.Data.Models.OneDayTripRegistrant", b =>
                {
                    b.Property<string>("PKey")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmployeeId");

                    b.Property<string>("EventId");

                    b.Property<string>("NumberOfFamilyMembers");

                    b.Property<string>("TransportationMode");

                    b.HasKey("PKey");

                    b.ToTable("OneDayTripRegistrants");
                });

            modelBuilder.Entity("EMS.Data.Models.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ClosingDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("EMS.Data.Models.Position", b =>
                {
                    b.Property<string>("PositionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("PositionDis");

                    b.Property<string>("PositionName");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("EMS.Data.Models.Project", b =>
                {
                    b.Property<int>("PrId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("ProjectDescription");

                    b.Property<string>("ProjectId");

                    b.Property<string>("ProjectName");

                    b.HasKey("PrId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EMS.Data.Models.RegEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Accomadation");

                    b.Property<DateTime>("Dob");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("EventId");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MealType");

                    b.Property<string>("Name");

                    b.Property<string>("Nic");

                    b.Property<DateTime>("SpouseDob");

                    b.Property<string>("SpouseName");

                    b.Property<string>("SpouseNic");

                    b.Property<string>("TransportationMode");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventId");

                    b.ToTable("RegEmployees");
                });

            modelBuilder.Entity("EMS.Data.Models.RegistrationAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accomadation");

                    b.Property<bool>("Dob");

                    b.Property<int>("EventId");

                    b.Property<bool>("Gender");

                    b.Property<bool>("MealType");

                    b.Property<bool>("Nic");

                    b.Property<bool>("SpouseDob");

                    b.Property<bool>("SpouseName");

                    b.Property<bool>("SpouseNic");

                    b.Property<bool>("TransportationMode");

                    b.HasKey("Id");

                    b.ToTable("RegistrationAttributes");
                });

            modelBuilder.Entity("EMS.Data.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ActualCost");

                    b.Property<DateTime>("AddDate");

                    b.Property<float>("BudgetedCost");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("StartDate");

                    b.Property<bool>("Status");

                    b.Property<string>("TaskName");

                    b.HasKey("TaskId");

                    b.HasIndex("EventId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("EMS.Data.Models.TaskInformation", b =>
                {
                    b.Property<int>("InfoID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactContactId");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("InfoDescription");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsComplete");

                    b.Property<int>("TaskTaskId");

                    b.HasKey("InfoID");

                    b.HasIndex("ContactContactId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskTaskId");

                    b.ToTable("TaskInformations");
                });

            modelBuilder.Entity("EMS.Data.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CricketTeamRegisterId");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.HasIndex("CricketTeamRegisterId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("EMS.Data.Models.TeamSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("SchDate");

                    b.Property<string>("SchName");

                    b.Property<int>("team1");

                    b.Property<int>("team10");

                    b.Property<int>("team11");

                    b.Property<int>("team12");

                    b.Property<int>("team13");

                    b.Property<int>("team14");

                    b.Property<int>("team15");

                    b.Property<int>("team16");

                    b.Property<int>("team2");

                    b.Property<int>("team3");

                    b.Property<int>("team4");

                    b.Property<int>("team5");

                    b.Property<int>("team6");

                    b.Property<int>("team7");

                    b.Property<int>("team8");

                    b.Property<int>("team9");

                    b.HasKey("Id");

                    b.ToTable("TeamSchedules");
                });

            modelBuilder.Entity("EMS.Data.Models.Test", b =>
                {
                    b.Property<string>("EmpName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("EmpName");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("EMS.Data.Models.TwoDayTripRegistrants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Accomadation");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("EventId");

                    b.Property<string>("MealTypeNonVegi");

                    b.Property<string>("MealTypeVegi");

                    b.Property<string>("NumberOfFamilyMembers");

                    b.Property<string>("PKey");

                    b.Property<string>("TransportationMode");

                    b.HasKey("Id");

                    b.ToTable("TwoDayTripRegistrant");
                });

            modelBuilder.Entity("EMS.Data.Models.VotedEmployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmployeeId");

                    b.Property<int>("PollId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PollId");

                    b.ToTable("VotedEmployee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EMS.Data.Models.CaptainEmails", b =>
                {
                    b.HasOne("EMS.Data.Models.Event")
                        .WithMany("CaptainEmails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.Comment", b =>
                {
                    b.HasOne("EMS.Data.Models.Employee")
                        .WithMany("Comments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.ContactDetails", b =>
                {
                    b.HasOne("EMS.Data.Models.Contact")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContactContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.Destination", b =>
                {
                    b.HasOne("EMS.Data.Models.Poll")
                        .WithMany("Destinations")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.Employee", b =>
                {
                    b.HasOne("EMS.Data.Models.Department")
                        .WithMany("Emp")
                        .HasForeignKey("DepartmentDprtId");

                    b.HasOne("EMS.Data.Models.Position")
                        .WithMany("Employee")
                        .HasForeignKey("PositionId");

                    b.HasOne("EMS.Data.Models.Project")
                        .WithMany("employees")
                        .HasForeignKey("ProjectPrId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.EmployeeTask", b =>
                {
                    b.HasOne("EMS.Data.Models.Employee", "Employee")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("EId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Task", "Task")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.Event", b =>
                {
                    b.HasOne("EMS.Data.Models.Eventtype")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.EventImages", b =>
                {
                    b.HasOne("EMS.Data.Models.Employee")
                        .WithMany("EventImages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.NotificationViewEmployee", b =>
                {
                    b.HasOne("EMS.Data.Models.Employee", "Employee")
                        .WithOne("NotificationViewEmployee")
                        .HasForeignKey("EMS.Data.Models.NotificationViewEmployee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Notification", "Notification")
                        .WithOne("NotificationViewEmployee")
                        .HasForeignKey("EMS.Data.Models.NotificationViewEmployee", "NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.RegEmployee", b =>
                {
                    b.HasOne("EMS.Data.Models.Employee")
                        .WithMany("RegEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Event")
                        .WithMany("RegEmployees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.Task", b =>
                {
                    b.HasOne("EMS.Data.Models.Event")
                        .WithMany("Tasks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.TaskInformation", b =>
                {
                    b.HasOne("EMS.Data.Models.Contact")
                        .WithMany("TaskInformation")
                        .HasForeignKey("ContactContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Employee")
                        .WithMany("TaskInformations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Task")
                        .WithMany("TaskInformation")
                        .HasForeignKey("TaskTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.TeamMember", b =>
                {
                    b.HasOne("EMS.Data.Models.CricketTeamRegister")
                        .WithMany("TeamMembers")
                        .HasForeignKey("CricketTeamRegisterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Employee")
                        .WithMany("TeamMembers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Data.Models.VotedEmployees", b =>
                {
                    b.HasOne("EMS.Data.Models.Employee")
                        .WithMany("VotedEmployee")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.Poll")
                        .WithMany("VotedEmployee")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EMS.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EMS.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EMS.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
